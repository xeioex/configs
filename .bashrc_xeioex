#!/usr/bin/env bash

# Bash snippets
# for i in {1..500}; do curl 'url' > /dev/null & done

# Generic routines
function __source-if-exist() {
    if [ -f $1 ]; then
        . $1
    fi
}

function __create-if-not-exist() {
    if [ ! -d $1 ]; then
        mkdir -p $1 2>/dev/null
    fi
}

function __is-exist() {
    which $1 2>/dev/null
}

function __dir_is-accessable() {
    (cd ${1:?pathname expected} 2>/dev/null) || return
}

# Customization
USERPROFILERC=~/.bashrc_user_profile
__source-if-exist $USERPROFILERC
__source-if-exist ~/.bashrc_private

export HOSTIP=$(ip addr|egrep 'inet.*eth0'|egrep -m 1 -o 'inet [0-9]+.[0-9]+.[0-9]+.[0-9]+' | sed 's/inet //')
export ESSENTIALCONFIGS="$USERPROFILERC $ESSENTIALCONFIGS"

#Colors aliases
# Reset
Color_Off="\[\e[0m\]"
Color_OffE="\e[0m"
# Bold Regular Colors
Red="\[\033[1;31m\]"
RedE="\033[1;31m"
Green="\[\033[1;32m\]"
GreenE="\033[1;32m"
Yellow="\[\033[1;33m\]"
YellowE="\033[1;33m"
Blue="\[\033[1;34m\]"
BlueE="\033[1;34m"
Purple="\[\033[1;35m\]"
PurpleE="\033[1;35m"
Cyan="\[\033[1;36m\]"
CyanE="\033[1;36m"
White="\[\033[1;37m\]"
WhiteE="\033[1;37m"

function info-message () {
    echo -e "${GreenE}$1${Color_OffE}"
}

function important-message () {
    echo -e "${YellowE}$1${Color_OffE}"
}

function warning-message () {
    echo -e "${RedE}$1${Color_OffE}"
}

export PS1HOST="$Red $HOSTIP $Color_Off"
if [[ $HOSTIP == $BASEHOSTIP ]]; then
    export HOSTIP='HOME'
    export PS1HOST="$Green $HOSTIP $Color_Off"
fi

export SHELLRC="~/.bashrc_$USER"
export SHELLCMD="bash --rcfile $SHELLRC -i"

export PS1="$Yellow[\@] $Red\#$Red$PS1HOST$Blue\u@\h$Yellow \w\n$Color_Off\$ "

if [ -n "$(type __git_ps1 2>/dev/null)" ]; then
    export PS1="\$(__git_ps1) $PS1"
fi

# AUX
export SSHRTUNNELPORT='11111'

__create-if-not-exist $WORKSPACE
__create-if-not-exist ~/.gdb

# Sources
__source-if-exist /etc/bashrc
__source-if-exist /usr/share/doc/cdargs/examples/cdargs-bash.sh
__source-if-exist /etc/bash_completion
__source-if-exist /etc/profile.d/nix.sh


PATH=$PATH:~/bin/

if [[ -n $stdenv && -f $stdenv/setup &&  -n $NIX_ENV ]]; then
    p=$PATH
    . $stdenv/setup
    export PATH="$PATH:$p"
    export NIX_REMOTE=daemon
    echo "importing nix env ($NIX_ENV) using $stdenv/setup"
    export PS1="(nix:$NIX_ENV) $PS1"
    set +e
fi

# Aliases
if [[ $TMUX || $EXPALIAS ]]; then
    shopt -s expand_aliases  #expand aliases in non-interactive shell
fi

alias ss="source $SHELLRC"

# Generic
alias ainstall='sudo apt-get install'
alias ainstall-dont-ask='sudo apt-get install -y --force-yes'
alias dpkgi='sudo dpkg -i'
alias asearch='sudo apt-cache search'
alias install-essential="ainstall -y $ESSENTIALPACKETS"
alias install-essential-dbg="ainstall -y $ESSENTIALDBGPACKETS"

alias clean-build='rm -fr ./build/ && rm -fr .scon*'

alias ls='ls --color=auto'
alias grep='egrep --color=auto'
alias ldd='bash ldd'
alias unix-now='date +"%s"'
alias unix-now-diff="perl -e 'print time - shift();print \"\n\";'"

alias cursor-invisible='tput cinvis'
alias cursor-visible='tput cnorm'

alias kill-service='pkill -9 -f'
alias kill-all-playout='pkill -9 -f playout'
alias kill-current-tty-playout="pkill -KILL -t $(tty | sed 's/\/dev\///') -f playout"

# X11
function __set_dual_monitors () {
    xrandr --output VGA1 --primary --left-of HDMI1 --output HDMI1 --auto
}

# set single monitor
function __set_single_monitor () {
    xrandr --output HDMI1 --off
}

function __switch_x11_to() {
    WID=$(xdotool search $1 2>/dev/null)
    xdotool windowfocus $WID
    xdotool windowactivate $WID
}
alias switch-to-dev="__switch_x11_to dev"
alias switch-to-aux="__switch_x11_to aux"

function __xclip-strip-trailing() {
    xclip -o -sel $1 | sed -e 's/ \+/ /g' | xclip -i -sel $1
}
alias xclipboard-strip-trailing="__xclip-strip-trailing clipboard"

# Python
function __venv_activate() {
    DIR=venv
    __create-if-not-exist $DIR
    virtualenv $DIR
    source $DIR/bin/activate
}
alias vactivate="__venv_activate"

# remote server helpers
function __copy-home() {
    scp $2 $USER@$BASEHOSTIP:$1
}
alias force-reboot="echo 'b' > /proc/sysrq-trigger"
alias reload-ssh-agent='eval `ssh-agent -s`; ssh-add'
alias ssh-copy-id='ssh-copy-id -i ~/.ssh/id_rsa.pub'
alias copy-home='__copy-home /tmp/'
alias copy-home-to='__copy-home'

function __install-repo-key() {
    wget $1 -O- | apt-key add -
}

# Interactive
# It's best if there's no output to stdout from login rc files such as ~/.bash_profile
# or ~/.profile since it can interfere with the proper operation of rsync for example.
if [[ $- == *i* ]]; then
    if [ -n "$(__is-exist keychain)" ]; then
        keychain -q --eval --agents ssh -Q --quiet id_rsa
    fi

    # disabling XOFF
    if [[ -t 0 ]]; then
        stty ixany
        stty ixoff -ixon
    fi
fi

if [[ $(hostname) != $BASEHOST ]]; then
    export DISPLAY=":0.0"
    function __mount-rw-nix() {
        export RW_NIX="/tmp/$USER-nix/"
        mkdir -p $RW_NIX

        which mount.aufs
        if [[ $? -ne 0 ]]; then
            ainstall aufs-tools
        fi

        RES=$(mount | grep nix  | grep aufs | wc -l)

        if [[ $RES -ne "1" ]]; then
            echo "mouting rw nix on $RW_NIX"
            mount -t aufs -o br=$RW_NIX=rw:/nix=ro -o udba=reval none /nix/
        fi
    }

    alias vim="vim -S ~/.vimrc_$USER"

    alias mount-rw-nix="__mount-rw-nix"

    alias install-root-essential-configs="sudo cp $ESSENTIALCONFIGS /root/"
    alias root-shell-enter="install-root-essential-configs; sudo -i"
fi

alias mount-workspace="__mount-workspace-if-needed"
function __mount-workspace-if-needed() {
    __dir_is-accessable $PWORKSPACE
    if [[ $? -ne 0 ]]; then
        echo "Can't detect workspace at: $PWORKSPACE, mounting"
        which sshfs
        if [[ $? -ne 0 ]]; then
            echo "sshfs not available, installing"
            ainstall sshfs -t squeeze
        fi
        alias __mntws="sshfs -p $SSHRTUNNELPORT $USER@localhost:/home/$USER/workspace/ $RWORKSPACE"
        shopt -s expand_aliases
        RES=$(__mntws)
        if [[ $RES -ne 0 ]]; then
            echo "Can't mount $PWORKSPACE. Trying umount -l $RWORKSPACE and do sshfs again"
            umount -l $RWORKSPACE
            $(__mntws)
        fi

        RES=$(cd $PWORKSPACE)
        if [[ $RES -ne 0 ]]; then
            echo "Can't mount $PWORKSPACE"
        fi
    fi
}

function __host-prepare() {
    scp $ESSENTIALCONFIGS $2:~/

    scp  ~/.vimrc_minimal $2:~/.vimrc_$USER

    ssh $2 "mkdir -p ~/.vim_$USER/plugin 2>/dev/null"
    scp  ~/.vim/plugin/comment.vim $2:~/.vim_$USER/plugin/

    scp  ~/.bashrc $2:$SHELLRC
    if [[ $1 ==  "1" ]]; then
        echo "host $2 enter, preparing debug env"
        ssh  $2 "bash -ic install-essential"
    fi
}

function __host-enter() {
    __host-prepare $1 $2
    ssh -t -X -R $SSHRTUNNELPORT:localhost:22 $2 $SHELLCMD
}

alias host-enter='__host-enter 0'
alias host-enter-dbg='__host-enter 1'

# TMUX
# reload environment
if [ -n "$(__is-exist tmux)" ]; then
    function tmux() {
    local tmux=$(type -fp tmux)
    case "$1" in
        update-environment|update-env|env-update)
            local v
            while read v; do
                echo "processing $v"
                if [[ $v == -* ]]; then
                    v=$(echo "$v" | sed -e 's/=.*//')
                    unset ${v/#-/}
                else
                    # Add quotes around the argument
                    v=${v/=/=\"}
                    v=${v/%/\"}
                    eval export $v
                fi
            done < <(tmux show-environment)
            ;;
        *)
            $tmux "$@"
            ;;

    esac
}
fi

if [[ -n $PROJECT ]]; then
    PROJECTPREFIX="${PROJECT}-"
else
    PROJECTPREFIX=""
fi

alias tmux-enter-dev="~/.tmux/${PROJECTPREFIX}dev"
alias tmux-enter-aux="~/.tmux/${PROJECTPREFIX}aux"
alias tmux-kill-dev='tmux kill-session -t dev'
alias tmux-kill-aux='tmux kill-session -t aux'

alias install-repo-key="__install-repo-key $1"

# custom
function __enable-cores() {
    sudo sysctl -w kernel.core_pattern=/tmp/core.%t.%h.%e.%p
    ulimit -c unlimited
}

function __prepare-nix-env() {
    which nix-build
    if [[ $? -ne 0 ]]; then
        info-message "nix-env not available, installing"
        # TODO: check system type before loading
        wget http://hydra.nixos.org/build/6695717/download/1/nix_1.6.1-1_amd64.deb
        sudo dpkg -i ./nix_1.6.1-1_amd64.deb
        sudo apt-get -y -f install
        sudo nix-channel --add $LOCAL_NIX_CHANNEL
        sudo nix-channel --update
    fi

    export NIX_ENV=$1
    export NIX_REMOTE=daemon
    sudo pkill nix-daemon
    important-message "updating nix channel..."
    sudo nix-channel --update
    sudo nohup nix-daemon > /dev/null&
    nix-build --show-trace --fallback  --keep-failed --run-env --command "$SHELLCMD" -A $1 $2
}

function __prepare-dev-env() {
    if [ -n "$1" ]; then
        export LD_LIBRARY_PATH=$1
    fi
    __enable-cores
    __prepare-nix-env $2 $DEVNIXPATH
}

function __deploy-nix-derivation() {
    nix-build -A $1  $DEVNIXPATH
}

function __prepare-playout-env() {
    __prepare-dev-env "./build/MLFoundation/:./build/MLStreams/:./build/Playout" $1
}

function __prepare-deligra-env() {
    __prepare-dev-env "./lib" deligra-develop
}

function __prepare-ptest-env() {
    __prepare-dev-env "" testing-playout-develop
}

function __deploy-ptest-env() {
    __deploy-nix-derivation testing-playout-develop
}

function __netem-activate() {
    sudo modprobe ifb
    sudo ip link set dev ifb0 up
    sudo tc qdisc add dev eth0 ingress
    sudo tc filter add dev eth0 parent ffff: protocol ip u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb0
}

function __netem-clear-qdisc() {
    sudo tc qdisc delete dev ifb0 root
    sudo tc qdisc delete dev eth0 root
}

alias netem-activate="__netem-activate"
alias netem-clear="__netem-clear-qdisc"

# Console
function ctags-populate-with-include-headers() {
    rm -fr tags TAGS
    important-message "gathering include dirs..."
    # to get $ON_COMPILE_FLAGS
    source $(which clang) 2>/dev/null
    important-message "scaning sources for tags..."
    ctags --options=$HOME/.vim/ctags-options 2>&1 | grep -v 'ignoring null|No such file or directory'
    export INCPATHS=$(echo $ON_COMPILE_FLAGS | sed 's/ /\n/g' | grep 'include' | sort -u | sed 's/-I//g')
    important-message "populating tags with nix include paths..."
    echo $INCPATHS | sed 's/ /\n/g' | ctags -L - --c++-kinds=+p --fields=+iaS --extra=+q --totals -R -a 2>&1 | grep -v 'ignoring null'
    export VIMINCPATHS=$(echo $INCPATHS| tr '\n' ' ' | sed 's/ /**,/g')
}

function cscope-populate-with-include-headers() {
important-message "populating cscope database..."
find . -name '*.py' \
    -o -iname '*.[chm]' \
    -o -name '*.cpp' \
    -o -name '*.cc' \
    -o -name '*.hpp'  \
    -o -name 'SConscript'  \
    -o -name '*.nu'  \
    -o -name '*.podsl'  \
    > cscope.files

export CSCOPE_DB=/tmp/cscope-$1.out
if [ -n "$NIX_CFLAGS_COMPILE" ]; then
    INCFLAGS=$(echo $NIX_CFLAGS_COMPILE  | sed 's/ /\n/g' | grep  'include' | sort -u | sed -r 's/(.+)/-I\1/g' | tr '\n' ' ')
fi
# -b: just build
# -q: create inverted index
cscope -R -b -q $INCFLAGS -f $CSCOPE_DB
}

function vim-enter-session() {
    ctags-populate-with-include-headers
    cscope-populate-with-include-headers "$USER-$1"
    info-message "Running vim..."
    vim --servername $1 -S ~/.vimrc
}

function vim-enter-clean-session() {
    rm -fr ~/.vim/backups/*; rm -fr ~/.vim/sessions/$USER-$1.vim; vim-enter-session $1
}


alias vim-enter-dev='vim-enter-session dev'
alias vim-enter-clean-dev='vim-enter-clean-session dev'

alias prepare-playout-env="__prepare-playout-env playout-develop"
alias prepare-nix-env='__prepare-nix-env'

alias prepare-po-workspace="mount-workspace; cd $PWORKSPACE;prepare-playout-env"

alias playout-run-with-clean-env='kill-current-tty-playout; sleep 1 &&'

alias playout-nix-version="nix-find-derivation playout"
alias playout-deb-version='dpkg -l| grep playout'
alias playout-deb-upgrade='apt-get update && apt-get install playout playout-dbg'

alias playout-tree='pstree -plH $(pidof playout)'
alias playout-pidof-worker-1="playout-tree | egrep -o 'playout\([0-9]+\)' | egrep -o '[0-9]+'"

alias nix-check-derivations='nix-env --show-trace -f default.nix -qa \*'
alias nix-find-derivation='nix-env  -qa '

alias ssh-reverse-socks-proxy="ssh -fN -p $SSHRTUNNELPORT -D 1080 $USER@localhost"
alias strip-escape-colors='sed -r "s/\x1B\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]//g'

# Application
alias pprof-name="perl -e '(\$base, \$rev) = shift() =~ /(prof-[^.]+).*(0[0-9]{3})/; \$part = shift(); if (\$part == 1) {print \$base;} if (\$part == 2) {print \$rev;}'"

function __pprof-diff() {
    PPROFMAIN=$1
    PPROFMAINREV=$(pprof-name $PPROFMAIN 2)
    if [[ -n $2 ]]; then
        PPROFBASE=$2
    else
        PPROFBASE=$(echo $PPROFMAIN|sed -r 's/0[0-9]{3}/0001/')
    fi
    PPROFBASEREV=$(pprof-name $PPROFBASE 2)
    PPROFNAME="$(pprof-name $PPROFMAIN 1)-$PPROFBASEREV-$PPROFMAINREV-diff.pdf"
    pprof --base=$PPROFBASE ./build/playout $PPROFMAIN --pdf > $PPROFNAME
    echo "generated: $PPROFNAME"
}

function __pprof-pdf() {
    PPROFBIN=$1
    PPROFFILE=$2
    PPROFNAME="$(basename $PPROFFILE).pdf"
    pprof  ./build/playout $PPROFFILE --pdf > $PPROFNAME
    echo "generated: $PPROFNAME"
}

alias pprof-diff="__pprof-diff"
alias pprof-pdf="__pprof-pdf"

# HOST only
if [[ $(hostname) == $BASEHOST ]]; then
    alias elecard-open="DISPLAY=:0.0 xtightvncviewer $ELECARD_SERVER"
    if [[ $(whoami) == $USER ]]; then
        # Interactive
        # It's best if there's no output to stdout from login rc files such as ~/.bash_profile
        # or ~/.profile since it can interfere with the proper operation of rsync for example.
        if [[ $- == *i* ]]; then
            if [[ -z $TMUX ]]; then
                echo "tmux-enter-dev - to enter development session"
                echo "tmux-enter-aux - to enter aux session"
                echo "WORKSPACE $WORKSPACE"
            fi
        fi
    fi
fi
